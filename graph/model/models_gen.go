// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Giveaway struct {
	ID           string    `json:"id"`
	Enabled      bool      `json:"enabled"`
	GuildID      string    `json:"guildID"`
	Host         string    `json:"host"`
	Item         string    `json:"item"`
	MessageID    string    `json:"messageID"`
	Participants []*string `json:"participants"`
}

type Merit struct {
	ID          string `json:"id"`
	GuildID     string `json:"guildID"`
	Offender    string `json:"offender"`
	StaffMember string `json:"staffMember"`
	Reason      string `json:"reason"`
}

type Server struct {
	ID             string       `json:"id"`
	Prefix         *string      `json:"prefix"`
	Silenced       *bool        `json:"silenced"`
	AgreeMethod    *AgreeMethod `json:"agreeMethod"`
	AntiAbuse      *bool        `json:"antiAbuse"`
	AntiInvite     *bool        `json:"antiInvite"`
	AntiSpam       *bool        `json:"antiSpam"`
	ApproveChannel *string      `json:"approveChannel"`
	DisabledCmds   []*string    `json:"disabledCmds"`
	LeaveM         *string      `json:"leaveM"`
	WelcomeM       *string      `json:"welcomeM"`
	LogChannel     *string      `json:"logChannel"`
	MainChannel    *string      `json:"mainChannel"`
	MemberRole     *string      `json:"memberRole"`
	MutedRole      *string      `json:"mutedRole"`
	StaffRole      *string      `json:"staffRole"`
	VerifiedRole   *string      `json:"verifiedRole"`
	MessagesToday  *int         `json:"messagesToday"`
}

type Strike struct {
	ID          string `json:"id"`
	GuildID     string `json:"guildID"`
	Offender    string `json:"offender"`
	StaffMember string `json:"staffMember"`
	Reason      string `json:"reason"`
}

type User struct {
	ID            string  `json:"id"`
	Age           *string `json:"age"`
	Country       *string `json:"country"`
	GayMsg        *string `json:"gayMsg"`
	GayPercentage *string `json:"gayPercentage"`
	Gender        *Gender `json:"gender"`
	LastDaily     *int    `json:"lastDaily"`
	Married       *bool   `json:"married"`
	MarriedAt     *int    `json:"marriedAt"`
	MarriedStatus *bool   `json:"marriedStatus"`
	MarriedTo     *string `json:"marriedTo"`
	Msgs          *int    `json:"msgs"`
	Points        *int    `json:"points"`
	Quote         *string `json:"quote"`
}

type AgreeMethod string

const (
	AgreeMethodAutorole AgreeMethod = "autorole"
)

var AllAgreeMethod = []AgreeMethod{
	AgreeMethodAutorole,
}

func (e AgreeMethod) IsValid() bool {
	switch e {
	case AgreeMethodAutorole:
		return true
	}
	return false
}

func (e AgreeMethod) String() string {
	return string(e)
}

func (e *AgreeMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AgreeMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AgreeMethod", str)
	}
	return nil
}

func (e AgreeMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMale   Gender = "Male"
	GenderFemale Gender = "Female"
	GenderOther  Gender = "Other"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
